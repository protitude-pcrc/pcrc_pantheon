@mixin button_stroke() {
  position: relative;
  display: inline-block;
  margin: 5px;
  padding: 0;
  font-size: 15px;
  font-family: $headFont;
  font-weight: $fontBold;
  line-height: 20px;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  color: $black;
  background-color: transparent;
  text-decoration: none;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  @include border-radius(0);
  @include box-shadow(white 0 0 0);
  border: none;
  &:hover {
    color: $black;
    background-color: transparent;
    text-decoration: none;
    .button-outline-top {
      &:before {
        width: 100%;
      }
      &:after {
        height: 100%;
      }
    }
    .button-outline-bottom {
      &:before {
        width: 100%;
      }
      &:after {
        height: 100%;
      }
    }
  }
  &:focus:active {
    background-color: currentColor;
    .button-text-wrapper {
      color: $white;
    }
  }
  &:focus {
    background-color: transparent;
  }
  .button-outline-top,
  .button-outline-bottom {
    &:before,
    &:after {
      @include single-transition(all, 0.4s ease-in-out);
      position: absolute;
      content: '';
      background: currentColor;
    }
  }
  .button-outline-top {
    display: block;
    &:before {
      top: 0;
      right: 0;
      width: calc(100% - 15px);
      height: 1px;
    }
    &:after {
      top: 0;
      right: 0;
      height: calc(100% - 15px);
      width: 1px;
    }
  }
  .button-outline-bottom {
    display: block;
    &:before {
      bottom: 0;
      left: 0;
      width: calc(100% - 15px);
      height: 1px;
    }
    &:after {
      bottom: 0;
      left: 0;
      height: calc(100% - 15px);
      width: 1px;
    }
  }
  .button-text-wrapper {
    padding: 10px 20px;
    display: block;
  }
}

@mixin button() {
  display: inline-block;
  padding: 11px 25px;
  margin: 3px 2px 3px 0;
  font-size: 13px;
  font-family: $headFont;
  font-weight: $fontSemibold;
  line-height: 20px;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  color: #666;
  text-decoration: none;
  @include border-radius(50px);
  @include single-transition(all, 0.4s, ease-in-out);
  border: 1px solid #d4d9dd;
  background-color: transparent;
  &:hover {
    text-decoration: none;
    @include single-transition(all, 0.4s, ease-in-out);
    border-color: #a9b3bb;
  }
}

@mixin toggle(){    
  background: none;
  border: none;
  outline: none;
  border-top: 1px solid #E0E0E0 !important;
  border-radius: 0px;
  box-shadow: none;
  @include fontSize(18px, 25.2px);
  color: #222;
  padding: 17px 30px 17px 0;
  font-weight: $fontMedium;
  margin: 0px;
  position: relative;
  cursor: pointer;
  &:hover,
  &.ui-state-active {
    color: #0681b2;
  }
  .ui-icon {
    position: absolute;
    top: 24px;
    right: 15px;
    background: none;
    height: 17px;
    width: 17px;
    margin-top: 0;
    background-image: url(#{$theme-images}/icon_plus.svg);
    @include single-transition(all, 0.2s ease-in-out);
  }
  &.ui-state-active .ui-icon {
    -ms-transform: rotate(135deg);
    -webkit-transform: rotate(135deg);
    transform: rotate(135deg);
  }
  @media #{$mediaMobileWideMin} {
    @include fontSize(20px, 28px);
    padding: 21px 30px 21px 0;
    .ui-icon {
      top: 25px;
      &:after {
        font-size: 20px;
      }
    }
  }
  @media #{$mediaTabletMin} {
    @include fontSize(22px, 30.8px);
    padding: 23px 30px 23px 0;
    .ui-icon {
      top: 26px;
      &:after {
        font-size: 22px;
      }
    }
  }
}

@mixin omegaTransition($type:all, $speed:0.25s, $transition: ease-in-out) {
  transition: $type $speed $transition;
  -moz-transition: $type $speed $transition;
  -webkit-transition: $type $speed $transition;
}

@mixin omegaCorners($rad: 5px) {
  -webkit-border-radius: $rad;
  -moz-border-radius: $rad;
  border-radius: $rad;
}

@function gwidth($c:$cols) {
  @return ($cwidth * $c) + ($gutter * $c);
}

@function calcwidth() {
  @return $twidth / gwidth($cols);
}

@mixin clearfix() {
  *zoom:1;
  &:before,
  &:after {
    content:"";
    display:table;
  }
  &:after {
    clear:both;
  }
}

@mixin row($c:$cols) {
  display: block;
  margin: 0 auto;	
  $rwidth: gwidth($c) * calcwidth();
  @if $twidth == 100% {
    $rwidth: 100%;
  }
  width: $rwidth;
  *width: $rwidth - $correction;
  @include clearfix();
}

@mixin column($x, $realcols:$cols, $margin: 'normal') {
  display: block;
  position: relative;
  clear: none;
 
  $colwidth: (gwidth($x) - $gutter) * calcwidth();
  $colmargin: ($gutter / 2) * calcwidth();
  @if $twidth == 100% {
    $colwidth: ((gwidth($x) - $gutter) * calcwidth()) * ($cols / $realcols);
    $colmargin: (($gutter / 2) * calcwidth()) * ($cols / $realcols);
  }
	
  $rightmargin: $colmargin;
  $leftmargin: $colmargin;

  width: $colwidth;

  margin-right: $rightmargin;
  margin-left: $leftmargin;

  *width: $colwidth - $correction;

  *margin-right: $rightmargin - $correction;
  *margin-left: $leftmargin - $correction;

  @if $margin == 'alpha' {
    @if $twidth == 100% {
      $rightmargin: $rightmargin * 2;
    }
    margin-right: $rightmargin;
  }
  @if $margin == 'omega' {
    @if $twidth == 100% {
      $leftmargin: $leftmargin * 2;
    }
    margin-left: $leftmargin;
  }

  @if $dir == 'LTR' {
    float: left;
  }
  @if $dir == 'RTL' {
    float: right;
  }
}

@mixin push($x:1) {
  @if $dir == 'LTR' {
    left: ($gutter + $cwidth) * calcwidth() * $x;
    right: auto;
  }
  @if $dir == 'RTL' {
    right: ($gutter + $cwidth) * calcwidth() * $x;
    left: auto;
  }
}

@mixin pull($x:1) {
  @if $dir == 'LTR' {
    right: ($gutter + $cwidth) * calcwidth() * $x;
    left: auto;
  }
  @if $dir == 'RTL' {
    left: ($gutter + $cwidth) * calcwidth() * $x;
    right: auto;
  }
}

@mixin prefix($x:1) {
  @if $dir == 'LTR' {
    margin-left: ((($gutter + $cwidth) * $x) + $gutter / 2) * calcwidth();
  }
  @if $dir == 'RTL' {
    margin-right: ((($gutter + $cwidth) * $x) + $gutter / 2) * calcwidth();
  }
}

@mixin suffix($x:1) {
  @if $dir == 'LTR' {
    margin-right: ((($gutter + $cwidth) * $x) + $gutter / 2) * calcwidth();
  }
  @if $dir == 'RTL' {
    margin-left: ((($gutter + $cwidth) * $x) + $gutter / 2) * calcwidth();
  }
}

@mixin column-reset() {
  width: 100%;
  margin-left: 0;
  margin-right: 0;
  left: auto;
  right: auto;
  float: none;
  clear: both;
}

@function calculateRem($size) {
  $remSize: $size / 10px;
  @return #{$remSize}rem;
}

@mixin fontSize($size, $height:0px) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
  @if $height != 0px {
    line-height: $height;
    line-height: calculateRem($height);
  }
}

@mixin hide_h1() {
  display: none;
}

@mixin title_icon() {
  background-color: #d9d9d9;
  color: $white;
  font-family: 'FontAwesome';
  height: 30px;
  line-height: 30px;
  text-align: center;
  text-decoration: none;
  width: 30px;
  font-weight: $fontNormal;
  border-radius: 50%;
  font-size: 15px;
  position: absolute;
  left: 10px;
  top: 5px;
}

@mixin custom_checkbox() {
  position: absolute; // take it out of document flow
  opacity: 0; // hide it
  top: 0;

  & + label {
    position: relative;
    cursor: pointer;
    padding: 0 0 0 30px;
    display: block;
  }

  // Box.
  & + label:before {
    content: '';
    margin-right: 10px;
    display: inline-block;
    vertical-align: text-top;
    width: 20px;
    height: 20px;
    background: $white;
    border: 1px solid #ccc;
    border-radius: 2px;
    position: absolute;
    top: 4px;
    left: 0;
  }

  // Box hover
  &:hover + label:before {
    background: #f57a22;
  }
  
  // Box focus
  //&:focus + label:before {
  //  box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.12);
  //}

  // Box checked
  &:checked + label:before {
    background: #f35429;
  }
  
  // Disabled state label.
  &:disabled + label {
    color: #b8b8b8;
    cursor: auto;
  }

  // Disabled box.
  &:disabled + label:before {
    box-shadow: none;
    background: #ddd;
  }

  // Checkmark. Could be replaced with an image
  &:checked + label:after {
    content: '';
    position: absolute;
    left: 5px;
    top: 13px;
    background: white;
    width: 2px;
    height: 2px;
    box-shadow: 
      2px 0 0 white,
      4px 0 0 white,
      4px -2px 0 white,
      4px -4px 0 white,
      4px -6px 0 white,
      4px -8px 0 white;
    transform: rotate(45deg);
  }
}
